#!/usr/bin/env bash
# copyright belongs to Evil Bob All rights reserved.

readonly video_1440="2560x1440"
readonly video_1080="1920x1080"
readonly h264="h264_vaapi"
readonly h265="hevc_vaapi"
readonly monitor_1=":0.0"
readonly monitor_2=":0.0+1920,0"
readonly dac="alsa_output.usb-Burr-Brown_from_TI_USB_Audio_CODEC-00.analog-stereo-output.monitor"
readonly snowball="alsa_input.usb-BLUE_MICROPHONE_Blue_Snowball_201306-00.mono-fallback"

framerate=30
qp=20
video_size="${video_1440}"
audio_device="${dac}"
monitor="${monitor_2}"
codec="${h264}"
url=
testing=


usage() { echo "$0 usage:" && grep " .)\ #" $0; exit 0; }
#[ $# -eq 0 ] && usage

retry() {
	${@} # <- this runs a function
	if [ $? -eq 255 ]; then
		exit
	else
		sleep 3
		retry "${@}"
	fi
}

#stream() {
#        ffmpeg -vaapi_device /dev/dri/renderD128 \
#               -f x11grab \
#               -video_size "${video_size}" \
#               -framerate "${framerate}"\
#               -i "${monitor}" \
#               -f pulse \
#               -ac 2 \
#               -i "${audio_device}" \
#               -f pulse \
#               -ac 2 \
#               -i "${snowball}" \
#               -vf 'format=p010|nv12|vaapi,hwupload' \
#               -filter_complex [2]afftdn=nf=-40[m],[m]volume=5dB[n],[1][n]amerge=inputs=2 \
#               -c:v "${codec}" \
#               -b:v 5M -maxrate 5M \
#               -f flv \
#               "${1}"
#}
# ,scale_vaapi=format=nv12

record-old() 
{
	ffmpeg -vaapi_device /dev/dri/renderD128 \
		-f x11grab \
		-video_size "${video_size}" \
		-framerate "${framerate}"\
		-i "${monitor}" \
		-f pulse \
		-ac 2 \
		-i "${audio_device}" \
		-f pulse \
		-ac 2 \
		-i "${snowball}" \
		-vf 'format=p010|nv12|vaapi,hwupload' \
		-filter_complex [2]afftdn=nr=15:nf=-40:tn=1[m],[m]volume=5dB[n],[1][n]amerge=inputs=2 \
		-c:v "${codec}" \
		-qp "${qp}" \
		"$(date '+%Y-%m-%d_%H-%M-%S').mkv"
}

record() 
{
	ffmpeg -hwaccel cuda -hwaccel_output_format cuda \
		-f x11grab \
		-video_size "${video_size}" \
		-framerate "${framerate}"\
		-i "${monitor}" \
		-f pulse \
		-i "${audio_device}" \
		-f pulse \
		-i "${snowball}" \
		-filter_complex [2]afftdn=nf=-40[m],[m]volume=5dB[n],[1][n]amerge=inputs=2 \
		-c:v h264_nvenc \
		-cq 28 \
		-preset slow \
		-c:a aac \
		-b:a 160k \
		-ac 2 \
		-ar 44100 \
		"$(date '+%Y-%m-%d_%H-%M-%S').mkv"
}

test() 
{
	ffmpeg -hwaccel cuda -hwaccel_output_format cuda \
		-f x11grab \
		-video_size "${video_size}" \
		-framerate "${framerate}"\
		-i "${monitor}" \
		-f pulse \
		-i "${audio_device}" \
		-f pulse \
		-i "${snowball}" \
		-filter_complex [2]afftdn=nf=-40[m],[m]volume=5dB[n],[1][n]amerge=inputs=2 \
		-c:v h264_nvenc \
		-preset slow \
		-b:v 16000k \
		-maxrate 16000k \
		-bufsize 16000k \
		-c:a aac \
		-b:a 160k \
		-ac 2 \
		-ar 44100 \
		-f flv \
		"${1}"
}

# -filter_complex [2]afftdn=nf=-25[m],[1][m]amerge=inputs=2 \

while getopts "hr:q:s:a:c:m:l:t:" arg; do
  case $arg in
    r) # Specify framerate 25, 30 or 60.
      framerate=${OPTARG}
      ;;
    q) # Specify a quality profile. defaults to 28.
      qp=${OPTARG}
      ;;
    s) # Specify a the size of the screen eg. 1920x1080.
      [ ${OPTARG} -eq 1920 ] && video_size=${video_1080}
      [ ${OPTARG} -eq 1440 ] && video_size=${video_1440}
      ;;
    a) # Specify an audio device. Find with: pactl list short sources
      audio_device=${OPTARG}
      ;;
    c) # Specify a codec either h264 or h265.
      [ "${OPTARG}" = "h264" ] && codec=${h264}
      [ "${OPTARG}" = "h265" ] && codec=${h265}
      ;;
    m) # Specify the monitor 1 or 2.
      [ ${OPTARG} -eq 1 ] && monitor=${monitor_1}
      [ ${OPTARG} -eq 2 ] && monitor=${monitor_2}
      ;;
    l) # Go live and start streaming.
        url="${OPTARG}"
      ;;
    t) # testing stream
        testing="${OPTARG}"
      ;;
    h | *) # Display help.
      usage
      exit 0
      ;;
  esac
done

if [ ! -z "${url}" ]; then
	retry stream ${url}
elif [ ! -z "${testing}" ]; then
	test ${testing}
else
	retry record
fi
